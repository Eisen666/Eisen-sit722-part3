# Write Kubernetes Deployment Script

# Specifies the API version used to create the deployment resource
apiVersion: apps/v1

# Indicates the type of Kubernetes resource
kind: Deployment

# Contains metadata about the deployment
metadata:
  name: book-catalog
spec:
  replicas: 2   # Specific the number of pod replicas to run, here we set 1 means only one instance
  selector:    # Defines how the Deployment finds which Pods to manage.
    matchLabels:
      app: book-catalog
  template:   # Defines the template for the pods that will be created by the Deployment.
    metadata:
      labels:
        app: book-catalog
    spec:
      containers:  # List the containers to run in each pod.
      - name: book-catalog  # The name of container.
        image: eisenlai.azurecr.io/book_catalog:latest # this s we tagger docuker image witt latest.
        imagePullPolicy: Always
        env: # Environment
        - name: DATABASE_URL # The envirnment variable name and PostgreSQL database 
          value: "postgresql://eisenlai68_7k9r_user:8xtlWTjTGIzHcIlTKV5cZDA5gDsvR2vF@dpg-crpan768ii6s73cepscg-a.oregon-postgres.render.com/eisenlai68_7k9r"
        ports:
        - containerPort: 8000
---

apiVersion: v1  # Specific the API version
kind: Service # Indicates the type of Kubernetes resource.
metadata:
  name: book-catalog-service # Set the name of the service
spec:
  selector:
    app: book-catalog # It matches pods with the label app:book_catalog.
  type: LoadBalancer # Exposes the service on each Node's IP at a static port.
  ports:
    - protocol: TCP  # The protocol to use.
      port: 8000 # The port that the service will listen on internally within Kubernetes cluster.
      targetPort: 8000 # The port on the container that the services should forward traffic to.
      


# Specifies the API version used to create the deployment resource
apiVersion: apps/v1

# Indicates the type of Kubernetes resource
kind: Deployment

# Contains metadata about the deployment
metadata:
  name: inventory-management
spec:
  replicas: 2   # Specific the number of pod replicas to run, here we set 1 means only one instance
  selector:    # Defines how the Deployment finds which Pods to manage.
    matchLabels:
      app: inventory-management
  template:   # Defines the template for the pods that will be created by the Deployment.
    metadata:
      labels:
        app: inventory-management
    spec:
      containers:  # List the containers to run in each pod.
      - name: inventory-management  # The name of container.
        image: eisenlai.azurecr.io/inventory_management:latest # this s we tagger docuker image witt latest.
        imagePullPolicy: Always
        env: # Environment
        - name: DATABASE_URL # The envirnment variable name and PostgreSQL database 
          value: "postgresql://eisenlai68_7k9r_user:8xtlWTjTGIzHcIlTKV5cZDA5gDsvR2vF@dpg-crpan768ii6s73cepscg-a.oregon-postgres.render.com/eisenlai68_7k9r"
---

apiVersion: v1  # Specific the API version
kind: Service # Indicates the type of Kubernetes resource.
metadata:
  name: inventory-management-service # Set the name of the service
spec:
  selector:
    app: inventory-management # It matches pods with the label app:book_catalog.
  type: LoadBalancer # Exposes the service on each Node's IP at a static port.
  ports:
    - protocol: TCP  # The protocol to use.
      port: 8001 # The port that the service will listen on internally within Kubernetes cluster.
      targetPort: 8001 # The port on the container that the services should forward traffic to.
     